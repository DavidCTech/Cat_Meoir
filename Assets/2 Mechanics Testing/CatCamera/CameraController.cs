//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Camera/CameraController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraController"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""91780f64-b715-42ec-938b-541bfee950e7"",
            ""actions"": [
                {
                    ""name"": ""CatMemoryZoom"",
                    ""type"": ""Button"",
                    ""id"": ""b52927f0-1e26-44d4-a136-cb7606443134"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CatMemorySnap"",
                    ""type"": ""Button"",
                    ""id"": ""2b794b6a-baf3-4114-b330-1d27a9460e4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1a4e1cd-196c-4925-9df9-546c9d7d5713"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CatMemoryZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d3429f8-e6c3-4f22-ac0f-ca0c7fa396db"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CatMemoryZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17cf0137-979b-4f62-8377-03cb5ad4c01a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CatMemorySnap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d147e68-61dc-4c5a-8fd6-e1083795d3df"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CatMemorySnap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_CatMemoryZoom = m_Camera.FindAction("CatMemoryZoom", throwIfNotFound: true);
        m_Camera_CatMemorySnap = m_Camera.FindAction("CatMemorySnap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_CatMemoryZoom;
    private readonly InputAction m_Camera_CatMemorySnap;
    public struct CameraActions
    {
        private @CameraController m_Wrapper;
        public CameraActions(@CameraController wrapper) { m_Wrapper = wrapper; }
        public InputAction @CatMemoryZoom => m_Wrapper.m_Camera_CatMemoryZoom;
        public InputAction @CatMemorySnap => m_Wrapper.m_Camera_CatMemorySnap;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @CatMemoryZoom.started += instance.OnCatMemoryZoom;
            @CatMemoryZoom.performed += instance.OnCatMemoryZoom;
            @CatMemoryZoom.canceled += instance.OnCatMemoryZoom;
            @CatMemorySnap.started += instance.OnCatMemorySnap;
            @CatMemorySnap.performed += instance.OnCatMemorySnap;
            @CatMemorySnap.canceled += instance.OnCatMemorySnap;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @CatMemoryZoom.started -= instance.OnCatMemoryZoom;
            @CatMemoryZoom.performed -= instance.OnCatMemoryZoom;
            @CatMemoryZoom.canceled -= instance.OnCatMemoryZoom;
            @CatMemorySnap.started -= instance.OnCatMemorySnap;
            @CatMemorySnap.performed -= instance.OnCatMemorySnap;
            @CatMemorySnap.canceled -= instance.OnCatMemorySnap;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface ICameraActions
    {
        void OnCatMemoryZoom(InputAction.CallbackContext context);
        void OnCatMemorySnap(InputAction.CallbackContext context);
    }
}
